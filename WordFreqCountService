using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Text;
using System.Net;
using System.Runtime.Serialization.Json;
using System.Xml;
using System.Xml.XPath;
using System.IO;
using System.Text.RegularExpressions;

namespace WcfService2
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Service1" in code, svc and config file together.
    // NOTE: In order to launch WCF Test Client for testing this service, please select Service1.svc or Service1.svc.cs at the Solution Explorer and start debugging.
    public class Service1 : IService1
    {
       
        public List<string> GetData(string url)
        {
            int count = 1;
            //takes the web content from the URL
            HttpWebRequest myRequest = (HttpWebRequest)WebRequest.Create(url);
            myRequest.Method = "GET";
            WebResponse myResponse = myRequest.GetResponse();
            StreamReader sr = new StreamReader(myResponse.GetResponseStream(), System.Text.Encoding.UTF8);
            string result = sr.ReadToEnd();
            sr.Close();
            myResponse.Close();

            string Pat = "<(script|style)\\b[^>]*?>.*?</\\1>";  //regular expression to remove javascript content
            string e = Regex.Replace(result, Pat, "", RegexOptions.IgnoreCase | RegexOptions.Singleline);
            string f = Regex.Replace(e, @"<[^>]+>|&nbsp;", " ").Trim(); //regular expression to remove html and xml content
            string g = Regex.Replace(f, @"\s{2,}", " ").Trim();

            List<string> wordList = g.Split(' ').ToList();
            List<string> a = new List<string>();
            Dictionary<string, int> dictionary = new Dictionary<string, int>();
            foreach (string word in wordList)
            {
                string w = word.ToLower();
                // If the length of the word is at least three letters...
                if (w.Length > 3)
                {
                    // ...check if the dictionary already has the word.
                    if (dictionary.ContainsKey(w))
                    {
                        // If we already have the word in the dictionary, increment the count of how many times it appears
                        dictionary[w]++;
                    }
                    else
                    {
                        // Otherwise, if it's a new word then add it to the dictionary with an initial count of 1
                        dictionary[w] = 1;
                    }
                }
            } // End of loop over each word in our input

            var sortedDict = (from entry in dictionary orderby entry.Value descending select entry).ToDictionary(pair => pair.Key, pair => pair.Value);
            foreach (KeyValuePair<string, int> pair in sortedDict)
            {
                // Output the most frequently occurring words and the associated word counts

                a.Add(pair.Key);
                count++;

                // Only display the top 10 words then break out of the loop!
                if (count > 10)
                {
                    break;
                }

            }
            return a;
        }
        
    }
   
    }
